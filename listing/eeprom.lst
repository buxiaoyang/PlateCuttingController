C51 COMPILER V7.50   EEPROM                                                                05/29/2014 22:32:42 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\output\eeprom.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE source\eeprom.c LARGE BROWSE INCDIR(.\include\) DEBUG OBJECTEXTEND PRINT(.\
                    -listing\eeprom.lst) OBJECT(.\output\eeprom.obj)

line level    source

   1          /*------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ---------------------------------------------*/
   3          /* --- STC12C5Axx Series MCU ISP/IAP/EEPROM Demo -------------------*/
   4          /* --- Mobile: (86)13922805190 -------------------------------------*/
   5          /* --- Fax: 86-755-82905966 ----------------------------------------*/
   6          /* --- Tel: 86-755-82948412 ----------------------------------------*/
   7          /* --- Web: www.STCMCU.com -----------------------------------------*/
   8          /* If you want to use the program or the program referenced in the  */
   9          /* article, please specify in which data and procedures from STC    */
  10          /*------------------------------------------------------------------*/
  11          
  12          #include <intrins.h>
  13          #include <eeprom.h>
  14          
  15          
  16          /*Declare SFR associated with the IAP */
  17          sfr IAP_DATA    =   0xC2;           //Flash data register
  18          sfr IAP_ADDRH   =   0xC3;           //Flash address HIGH
  19          sfr IAP_ADDRL   =   0xC4;           //Flash address LOW
  20          sfr IAP_CMD     =   0xC5;           //Flash command register
  21          sfr IAP_TRIG    =   0xC6;           //Flash command trigger
  22          sfr IAP_CONTR   =   0xC7;           //Flash control register
  23          
  24          /*Define ISP/IAP/EEPROM command*/
  25          #define CMD_IDLE    0               //Stand-By
  26          #define CMD_READ    1               //Byte-Read
  27          #define CMD_PROGRAM 2               //Byte-Program
  28          #define CMD_ERASE   3               //Sector-Erase
  29          
  30          /*Define ISP/IAP/EEPROM operation const for IAP_CONTR*/
  31          //#define ENABLE_IAP 0x80           //if SYSCLK<30MHz
  32          //#define ENABLE_IAP 0x81           //if SYSCLK<24MHz
  33          //#define ENABLE_IAP  0x82            //if SYSCLK<20MHz
  34          #define ENABLE_IAP 0x83           //if SYSCLK<12MHz
  35          //#define ENABLE_IAP 0x84           //if SYSCLK<6MHz
  36          //#define ENABLE_IAP 0x85           //if SYSCLK<3MHz
  37          //#define ENABLE_IAP 0x86           //if SYSCLK<2MHz
  38          //#define ENABLE_IAP 0x87           //if SYSCLK<1MHz
  39          
  40          
  41          /*----------------------------
  42          Software delay function
  43          ----------------------------*/
  44          void Delay(BYTE n)
  45          {
  46   1          WORD x;
  47   1      
  48   1          while (n--)
  49   1          {
  50   2              x = 0;
  51   2              while (++x);
  52   2          }
  53   1      }
  54          
C51 COMPILER V7.50   EEPROM                                                                05/29/2014 22:32:42 PAGE 2   

  55          /*----------------------------
  56          Disable ISP/IAP/EEPROM function
  57          Make MCU in a safe state
  58          ----------------------------*/
  59          void IapIdle()
  60          {
  61   1          IAP_CONTR = 0;                  //Close IAP function
  62   1          IAP_CMD = 0;                    //Clear command to standby
  63   1          IAP_TRIG = 0;                   //Clear trigger register
  64   1          IAP_ADDRH = 0x80;               //Data ptr point to non-EEPROM area
  65   1          IAP_ADDRL = 0;                  //Clear IAP address to prevent misuse
  66   1      }
  67          
  68          /*----------------------------
  69          Read one byte from ISP/IAP/EEPROM area
  70          Input: addr (ISP/IAP/EEPROM address)
  71          Output:Flash data
  72          ----------------------------*/
  73          BYTE IapReadByte(WORD addr)
  74          {
  75   1          BYTE dat;                       //Data buffer
  76   1      
  77   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
  78   1          IAP_CMD = CMD_READ;             //Set ISP/IAP/EEPROM READ command
  79   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
  80   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
  81   1          IAP_TRIG = 0x5a;                //Send trigger command1 (0x5a)
  82   1          IAP_TRIG = 0xa5;                //Send trigger command2 (0xa5)
  83   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
  84   1          dat = IAP_DATA;                 //Read ISP/IAP/EEPROM data
  85   1          IapIdle();                      //Close ISP/IAP/EEPROM function
  86   1      
  87   1          return dat;                     //Return Flash data
  88   1      }
  89          
  90          /*----------------------------
  91          Program one byte to ISP/IAP/EEPROM area
  92          Input: addr (ISP/IAP/EEPROM address)
  93                 dat (ISP/IAP/EEPROM data)
  94          Output:-
  95          ----------------------------*/
  96          void IapProgramByte(WORD addr, BYTE dat)
  97          {
  98   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
  99   1          IAP_CMD = CMD_PROGRAM;          //Set ISP/IAP/EEPROM PROGRAM command
 100   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
 101   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
 102   1          IAP_DATA = dat;                 //Write ISP/IAP/EEPROM data
 103   1          IAP_TRIG = 0x5a;                //Send trigger command1 (0x5a)
 104   1          IAP_TRIG = 0xa5;                //Send trigger command2 (0xa5)
 105   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
 106   1          IapIdle();
 107   1      }
 108          
 109          /*----------------------------
 110          Erase one sector area
 111          Input: addr (ISP/IAP/EEPROM address)
 112          Output:-
 113          ----------------------------*/
 114          void IapEraseSector(WORD addr)
 115          {
 116   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
C51 COMPILER V7.50   EEPROM                                                                05/29/2014 22:32:42 PAGE 3   

 117   1          IAP_CMD = CMD_ERASE;            //Set ISP/IAP/EEPROM ERASE command
 118   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
 119   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
 120   1          IAP_TRIG = 0x5a;                //Send trigger command1 (0x5a)
 121   1          IAP_TRIG = 0xa5;                //Send trigger command2 (0xa5)
 122   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
 123   1          IapIdle();
 124   1      }
 125          
 126          
 127          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    103    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
